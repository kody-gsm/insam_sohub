# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from logic._grpc.base import base_pb2 as logic_dot_grpc_dot_base_dot_base__pb2
from logic._grpc.user import User_db_pb2 as logic_dot_grpc_dot_user_dot_User__db__pb2


class UserTrafficStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.user_create = channel.unary_unary(
                '/UserTraffic/user_create',
                request_serializer=logic_dot_grpc_dot_user_dot_User__db__pb2.User.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
                )
        self.user_delete = channel.unary_unary(
                '/UserTraffic/user_delete',
                request_serializer=logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
                )
        self.user_update = channel.unary_unary(
                '/UserTraffic/user_update',
                request_serializer=logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
                )
        self.user_login = channel.unary_unary(
                '/UserTraffic/user_login',
                request_serializer=logic_dot_grpc_dot_user_dot_User__db__pb2.User.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_user_dot_User__db__pb2.JWTToken.FromString,
                )
        self.refresh_token = channel.unary_unary(
                '/UserTraffic/refresh_token',
                request_serializer=logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_user_dot_User__db__pb2.RefreshToken.FromString,
                )


class UserTrafficServicer(object):
    """Missing associated documentation comment in .proto file."""

    def user_create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def user_delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def user_update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def user_login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def refresh_token(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserTrafficServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'user_create': grpc.unary_unary_rpc_method_handler(
                    servicer.user_create,
                    request_deserializer=logic_dot_grpc_dot_user_dot_User__db__pb2.User.FromString,
                    response_serializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.SerializeToString,
            ),
            'user_delete': grpc.unary_unary_rpc_method_handler(
                    servicer.user_delete,
                    request_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.FromString,
                    response_serializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.SerializeToString,
            ),
            'user_update': grpc.unary_unary_rpc_method_handler(
                    servicer.user_update,
                    request_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.FromString,
                    response_serializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.SerializeToString,
            ),
            'user_login': grpc.unary_unary_rpc_method_handler(
                    servicer.user_login,
                    request_deserializer=logic_dot_grpc_dot_user_dot_User__db__pb2.User.FromString,
                    response_serializer=logic_dot_grpc_dot_user_dot_User__db__pb2.JWTToken.SerializeToString,
            ),
            'refresh_token': grpc.unary_unary_rpc_method_handler(
                    servicer.refresh_token,
                    request_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.FromString,
                    response_serializer=logic_dot_grpc_dot_user_dot_User__db__pb2.RefreshToken.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UserTraffic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserTraffic(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def user_create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserTraffic/user_create',
            logic_dot_grpc_dot_user_dot_User__db__pb2.User.SerializeToString,
            logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def user_delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserTraffic/user_delete',
            logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.SerializeToString,
            logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def user_update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserTraffic/user_update',
            logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.SerializeToString,
            logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def user_login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserTraffic/user_login',
            logic_dot_grpc_dot_user_dot_User__db__pb2.User.SerializeToString,
            logic_dot_grpc_dot_user_dot_User__db__pb2.JWTToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def refresh_token(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserTraffic/refresh_token',
            logic_dot_grpc_dot_base_dot_base__pb2.AccessToken.SerializeToString,
            logic_dot_grpc_dot_user_dot_User__db__pb2.RefreshToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
