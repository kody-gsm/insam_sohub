# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from logic._grpc.base import base_pb2 as logic_dot_grpc_dot_base_dot_base__pb2
from logic._grpc.image import Image_db_pb2 as logic_dot_grpc_dot_image_dot_Image__db__pb2
from logic._grpc.pot import Pot_db_pb2 as logic_dot_grpc_dot_pot_dot_Pot__db__pb2


class ImageTrafficStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.image_create = channel.unary_unary(
                '/ImageTraffic/image_create',
                request_serializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
                )
        self.image_delete = channel.unary_unary(
                '/ImageTraffic/image_delete',
                request_serializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
                )
        self.image_read = channel.unary_unary(
                '/ImageTraffic/image_read',
                request_serializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
                )
        self.image_read_list = channel.unary_stream(
                '/ImageTraffic/image_read_list',
                request_serializer=logic_dot_grpc_dot_pot_dot_Pot__db__pb2.CertifiedPot.SerializeToString,
                response_deserializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.Image.FromString,
                )


class ImageTrafficServicer(object):
    """Missing associated documentation comment in .proto file."""

    def image_create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def image_delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def image_read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def image_read_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageTrafficServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'image_create': grpc.unary_unary_rpc_method_handler(
                    servicer.image_create,
                    request_deserializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.FromString,
                    response_serializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.SerializeToString,
            ),
            'image_delete': grpc.unary_unary_rpc_method_handler(
                    servicer.image_delete,
                    request_deserializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.FromString,
                    response_serializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.SerializeToString,
            ),
            'image_read': grpc.unary_unary_rpc_method_handler(
                    servicer.image_read,
                    request_deserializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.FromString,
                    response_serializer=logic_dot_grpc_dot_base_dot_base__pb2.Response.SerializeToString,
            ),
            'image_read_list': grpc.unary_stream_rpc_method_handler(
                    servicer.image_read_list,
                    request_deserializer=logic_dot_grpc_dot_pot_dot_Pot__db__pb2.CertifiedPot.FromString,
                    response_serializer=logic_dot_grpc_dot_image_dot_Image__db__pb2.Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImageTraffic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageTraffic(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def image_create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageTraffic/image_create',
            logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.SerializeToString,
            logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def image_delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageTraffic/image_delete',
            logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.SerializeToString,
            logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def image_read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageTraffic/image_read',
            logic_dot_grpc_dot_image_dot_Image__db__pb2.CertifiedImage.SerializeToString,
            logic_dot_grpc_dot_base_dot_base__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def image_read_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ImageTraffic/image_read_list',
            logic_dot_grpc_dot_pot_dot_Pot__db__pb2.CertifiedPot.SerializeToString,
            logic_dot_grpc_dot_image_dot_Image__db__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
